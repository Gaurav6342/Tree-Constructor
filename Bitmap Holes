Have the function BitmapHoles(strArr) take the array of strings stored in strArr, which will be a 2D matrix of 0 and 1's, 
and determine how many holes, or contiguous regions of 0's, exist in the matrix. 
A contiguous region is one where there is a connected group of 0's going in one or more of four directions:
up, down, left, or right. For example: if strArr is ["10111", "10101", "11101", "11111"], then this looks like the following matrix:

1 0 1 1 1
1 0 1 0 1
1 1 1 0 1
1 1 1 1 1

For the input above, your program should return 2 because there are two separate contiguous regions of 0's, 
which create "holes" in the matrix. You can assume the input will not be empty.
Examples
Input: ["01111", "01101", "00011", "11110"]
Output: 3
Input: ["1011", "0010"]
Output: 2


Python code:

def BitmapHoles(strArr):
    n_rows, n_cols = len(strArr), len(strArr[0])
    visited = [[False]*n_cols for _ in range(n_rows)]
    count = 0

    def dfs(row, col):
        visited[row][col] = True
        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            r, c = row+dr, col+dc
            if 0 <= r < n_rows and 0 <= c < n_cols and not visited[r][c] and strArr[r][c] == '0':
                dfs(r, c)

    for i in range(n_rows):
        for j in range(n_cols):
            if not visited[i][j] and strArr[i][j] == '0':
                count += 1
                dfs(i, j)

    return count

  # code goes here
    return strArr

# keep this function call here 
print(BitmapHoles(input()))

Output:

== RUNNING SAMPLE TEST CASES ==

== INPUT ==
["1011", "0010"]

== OUTPUT ==
2

<< CORRECT >>

== INPUT ==
["01111", "01101", "00011", "11110"]

== OUTPUT ==
3

<< CORRECT >>

== 8 TEST CASES HIDDEN ==
